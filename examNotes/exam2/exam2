____________________________________________________________________________________
1. Big-Oh
____________________________________________________________________________________
A. Basics
	I: tighter and weaker bounds
		n^n >> n! >> 2^n >> n^3 >> n^2 >> nlogn >> n >> logn >> 1
		n^m,(m>0) >> logn
		Example: n^(0.00001) >> logn
B. Application to Algorithms
	I: instances and runtime graphs
		x-axis: values of n
		y-axis: values of f(n), g(n), which represents execution time.
	II: WCET, BCET, ACET
	III: Big-oh of code segments
C. Big-Oh in real world
	I: real code time (matrix mult)
		matrix multiplication: O(n^3)
	II: effect of cache/piplelining, etc.
		cache, ram, disk:
		piplelining:
	III: choosing algo in real-world vs big-Oh
		*constants might matter more in real world than in big-Oh
		*easier implementation might make a difference
____________________________________________________________________________________
2. Data Structures
____________________________________________________________________________________
A. Basics
	I: Arrays (sorted/unsorted)
	II: Linked lists (singly/doubly, sorted/unsorted)
	III: comparison of arrays and linked lists
B. Basic Abstract Data Types
	I: Stack, Queue (implementations using array/linked lists)

Stack: push and pop
	imp: Array: push and pop both take O(1)
Queue: enqueue and dequeue
	imp: Array: enqueue and dequeue both take O(1)
	(Use a circuilar array with pointer to min and end)

	II: comparison of operations of different implementation of stack/queue
	III: reasons for difference
	IV: Dictionaries
		Imp: sorted array.
		Search(D,k)
		Insert(D,x)
		Delete(D,x)
		Max(D), Min(D)
		Predecessor(D,k), Successor(D,k)
	V: Hash Tables
		search one key:  
		by chainning, O(n+m),go through n entries, and find the key from m keys.
		by open addressing: number of entries can be bigger than the number of objects. No pointers need compare to chainning.

C. Other Abstract Data Types (ADTs)
	I: Binary Search Trees (BST)
		Find arbitrary key in BST: O(logn) or O(h)
		Traversal: O(n) go through every item
		Insert/delete: O(h) or O(logn)
	II: Priority Search Queues
Priority-queue: find-min, delete-min, insert
	imp: Heap: find-min is O(1), delete-min is O(logn), insert is O(logn)

	III: Heap implementation
		
		parent position = i
		child position = 2i or 2i+1

		parent position = floor(child position/2)
		
		linked list (unsorted): 
			Find arbitrary key in heap tree: O(n)
			insertion, deletion: O(1)
			Find min/max: O(1)
		linked list (sorted):
			insertion: O(n), have to find the correct spot for the key.
D. Storing points, graphs, sets, etc
	I: graphs
	II: sets
E. Big-Oh of operations on data structures
F. Algorithms on data structures (BST, Heap, etc)
	I: Rabin-Karp Algorithm: using hash table to search for a string(size m) in a large string(size n)
		WCET: O(mn)
		BCET: O(n+m)
		Calculation: sum = sum(base(position) * asciiValue), compare each sum.
		
		
____________________________________________________________________________________
3. Proof Techniques
____________________________________________________________________________________
A. Different Techniques
	I: contradiction
		RIP (required to prove):...
		Assume...
		...
		From ... and (some know fact), we arrived at a contradiction.
		Therefore our assumption is false and ...
		QED 
	II: induction
		RTP:...
		Base Case:...
		Induction Hypothesis:...
		Induction Step:...
		QED
	III: direct proof (deduction proof)
	IV. vacuous & trivial proof:
		|P|Q|P->Q| 
		|T|T|  T |
		|T|F|  F |
		|F|T|  T |
		|F|F|  T |
		vacuous: P is false, P->Q is always true
		trivial: Q is true, P->Q is always true
	V. contrapositve:
		|~P|~Q|~Q->~p| 
		|F |F |   T  |
		|F |T |   F  |
		|T |F |   T  |
		|T |T |   T  |
B. Proofs in class
	I: Halting problem is undecidable
Prove:
RTP: There is no program to solve the Halting Problem.
Assume that there exists a program Halt(P, I) that solves the halting problem, Halt(P, I) returns True iff P halts on I. We construct the following code Z:

Program (String x)
If Halt(x, x) then
     Loop Forever
Else Halt.
End.

Consider what happens when the program Z is run with input Z
Case 1: Program Z halts on input Z. Hence, by the correctness of the Halt program, Halt returns true on input Z, Z. Hence, program Z loops forever on input Z. Contradiction.

Case 1: Program Z loops forever on input Z. Hence, by the correctness of the Halt program, Halt returns false on input Z, Z. Hence, program Z halts on input Z. Contradiction.

QED.
____________________________________________________________________________________
4. Algorithmic Techniques
____________________________________________________________________________________
A. Brute Force Techniques

	I: search space for different problems
	II: recursion tree for brute force approach
	III: backtrack algorithm from textbook
	IV: iterative way to generate all subsets
	V: recursive way to generate all subsets
	VI: recursive way to generate all perms
		permutation tree graph
	VII: recursive way to generate subsets with size k
O(2^n)?

pseudocode:

Backtrack-DFS(A,k):
if A=(a1,a2,...,ak) is a solution, report it.
else
	k=k+1
	compute Sk
	while Sk!=0 do
		ak= an element in Sk
		Sk=Sk-ak
		Backtrack-DFS(A,k)
C++?:

boolean finished = false;
backtrack(int a[], int k, data input){
	int c[MaxCandidates]; //candidates for next position
	int ncandidates; //next position candidate count
	int i;
	if(is_a_solution(a,k,input))
		process_solution(a,k,input)
	else{
		a[k] = c[i];
		make_move(a,k,input);
		backtrack(a,k,input);
		unmake_move(a,k,input);
		if(finished) return;
	}
}
	
