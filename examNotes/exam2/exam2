____________________________________________________________________________________
1. Big-Oh
____________________________________________________________________________________
A. Basics
	I: tighter and weaker bounds
		n^n >> n! >> 2^n >> n^3 >> n^2 >> nlogn >> n >> logn >> 1
B. Application to Algorithms
	I: instances and runtime graphs
		x-axis: values of n
		y-axis: values of f(n), g(n), which represents execution time.
	II: WCET, BCET, ACET
	III: Big-oh of code segments
C. Big-Oh in real world
	I: real code time (matrix mult)
	II: effect of cache/piplelining, etc.
	III: choosing algo in real-world vs big-Oh
		*constants might matter more in real world than in big-Oh
		*easier implementation might make a difference
____________________________________________________________________________________
2. Data Structures
____________________________________________________________________________________
A. Basics
	I: Arrays (sorted/unsorted)
	II: Linked lists (singly/doubly, sorted/unsorted)
	III: comparison of arrays and linked lists
B. Basic Abstract Data Types
	I: Stack, Queue (implementations using array/linked lists)
	II: comparison of operations of different implementation of stack/queue
	III: reasons for difference
	IV: Dictionaries
	V: Hash Tables
C. Other Abstract Data Types (ADTs)
	I: Binary Search Trees (BST)
	II: Priority Search Queues
	III: Heap implementation
D. Storing points, graphs, sets, etc
	I: graphs
	II: sets
E. Big-Oh of operations on data structures
F. Algorithms on data structures (BST, Heap, etc)
____________________________________________________________________________________
3. Proof Techniques
____________________________________________________________________________________
A. Different Techniques
	I: contradiction
	II: induction
	III: direct proof (deduction proof)
	IV. vacuous & trivial proof:
		|P|Q|P->Q| 
		|T|T|  T |
		|T|F|  F |
		|F|T|  T |
		|F|F|  T |
		vacuous: P is false, P->Q is true
		trivial: Q is true, P->Q is true
	V. contrapositve:
		|~P|~Q|~Q->~p| 
		|F |F |   T  |
		|F |T |   F  |
		|T |F |   T  |
		|T |T |   T  |
B. Proofs in class
	I: Halting problem is undecidable
	II: VC <= p IS and IS <= p VC
	III: setlect jobs satisfies greedy choice + opt substructuring
____________________________________________________________________________________
4. Algorithmic Techniques
____________________________________________________________________________________
A. Brute Force Techniques

	I: search space for different problems
	II: recursion tree for brute force approach
	III: backtrack algorithm from textbook
	IV: iterative way to generate all subsets
	V: recursive way to generate all subsets
	VI: recursive way to generate all perms
	VII: recursive way to generate subsets with size k

Backtrack-DFS(A,k):
if A=(a1,a2,...,ak) is a solution, report it.
else
	k=k+1
	compute Sk
	while Sk!=0 do
		ak= an element in Sk
		Sk=Sk-ak
		Backtrack-DFS(A,k)
	
